name: iOS TestFlight (MAUI) — público ➜ privado

on:
  workflow_dispatch:

concurrency:
  group: ios-testflight-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOTNET_VERSION: 8.0.415
  XCODE_VERSION: "15.4"

jobs:
  build-and-upload:
    runs-on: macos-14

    steps:
      # 1) Repo CI (este)
      - name: Checkout (CI repo)
        uses: actions/checkout@v4

      # 2) Repo privado con el código
      - name: Checkout private source
        uses: actions/checkout@v4
        with:
          repository: Salvacuentacuentos/Eraseunaapp
          # ref: master     # <- ajusta si tu rama es otra
          path: source/repos
          ssh-key: ${{ secrets.PRIVATE_REPO_DEPLOY_KEY }}

      # 3) Herramientas
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install MAUI workloads (iOS)
        run: |
          set -euo pipefail
          dotnet --info
          dotnet workload install maui maui-ios --source https://api.nuget.org/v3/index.json

      # 4) Detectar automáticamente el csproj
      - name: Locate project (auto)
        id: proj
        run: |
          set -euo pipefail
          echo "Contenido de source/repos:"
          ls -la source/repos || true

          CS=$(find source -maxdepth 4 -type f -name "Eraseunaapp.csproj" -print -quit)
          if [ -z "$CS" ]; then
            echo "No se encontró Eraseunaapp.csproj. Listado de .csproj cercanos:" >&2
            find source -maxdepth 6 -type f -name "*.csproj" -print >&2
            exit 1
          fi
          DIR=$(dirname "$CS")
          echo "csproj=$CS"   >> $GITHUB_OUTPUT
          echo "srcdir=$DIR"  >> $GITHUB_OUTPUT
          echo "Proyecto: $CS"
          echo "Carpeta:  $DIR"
          ls -la "$DIR"

      # 5) Workload restore (iOS)  — SIN ruta
- name: Workload restore (iOS)
  working-directory: ${{ steps.proj.outputs.srcdir }}
  run: |
    set -euo pipefail
    dotnet workload restore

# 6) Restore (iOS only) — usar solo el nombre del csproj
- name: Restore (iOS only)
  working-directory: ${{ steps.proj.outputs.srcdir }}
  run: |
    set -euo pipefail
    dotnet restore "$(basename "${{ steps.proj.outputs.csproj }}")" -p:TargetFramework=net8.0-ios

# 8) Publish (.xcarchive) + .ipa — usar solo el nombre del csproj
- name: Publish (.xcarchive) + .ipa
  working-directory: ${{ steps.proj.outputs.srcdir }}
  run: |
    set -euo pipefail
    dotnet publish "$(basename "${{ steps.proj.outputs.csproj }}")" \
      -c Release \
      -f net8.0-ios \
      -p:RuntimeIdentifier=ios-arm64 \
      -p:ArchiveOnBuild=true \
      -p:BuildIpa=true \
      -p:CodesignKey="${{ env.CERT_NAME }}" \
      -p:ProvisioningProfileUuid="${{ env.PP_UUID }}"


      - name: Find IPA
        id: findipa
        run: |
          set -euo pipefail
          IPA_PATH="$(find "${{ steps.proj.outputs.srcdir }}/bin/Release/net8.0-ios/ios-arm64" -type f -name "*.ipa" -print -quit)"
          echo "ipa=$IPA_PATH" >> $GITHUB_OUTPUT
          test -f "$IPA_PATH" && echo "IPA: $IPA_PATH"

      # 9) Subir a TestFlight
      - name: Upload to TestFlight
        if: steps.findipa.outputs.ipa != ''
        env:
          APPSTORE_ISSUER_ID:   ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID:      ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          IPA="${{ steps.findipa.outputs.ipa }}"
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          KEYFILE="$HOME/.appstoreconnect/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8"
          printf "%s" "$APPSTORE_PRIVATE_KEY" > "$KEYFILE"
          chmod 600 "$KEYFILE"
          xcrun iTMSTransporter -m upload \
            -apiKey "$APPSTORE_KEY_ID" \
            -apiIssuer "$APPSTORE_ISSUER_ID" \
            -assetFile "$IPA" -v

      # 10) Artefactos
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ${{ steps.findipa.outputs.ipa }}
            $HOME/Library/Logs/DiagnosticReports/*
          if-no-files-found: ignore
