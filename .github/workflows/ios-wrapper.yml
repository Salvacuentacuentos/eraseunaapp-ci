name: iOS TestFlight (MAUI) — público ➜ privado

on:
  workflow_dispatch:

concurrency:
  group: ios-testflight-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOTNET_VERSION: 8.0.415
  XCODE_VERSION: "15.4"

jobs:
  build-and-upload:
    runs-on: macos-14

    steps:
      - name: Checkout (CI repo)
        uses: actions/checkout@v4

      - name: Checkout private source
        uses: actions/checkout@v4
        with:
          repository: Salvacuentacuentos/Eraseunaapp
          # ref: main            # cambia si tu rama es otra
          path: source/repos
          ssh-key: ${{ secrets.PRIVATE_REPO_DEPLOY_KEY }}

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install MAUI workloads (iOS)
        run: |
          set -euo pipefail
          dotnet --info
          dotnet workload install maui maui-ios --source https://api.nuget.org/v3/index.json

      - name: Locate project (auto)
        id: proj
        run: |
          set -euo pipefail
          echo "Contenido de source/repos:"
          ls -la source/repos || true

          CS=$(find source -maxdepth 4 -type f -name "Eraseunaapp.csproj" -print -quit)
          if [ -z "$CS" ]; then
            echo "No se encontró Eraseunaapp.csproj. Lista de .csproj:" >&2
            find source -maxdepth 6 -type f -name "*.csproj" -print >&2
            exit 1
          fi
          DIR=$(dirname "$CS")
          echo "csproj=$CS"  >> "$GITHUB_OUTPUT"
          echo "srcdir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Proyecto: $CS"
          echo "Carpeta:  $DIR"
          ls -la "$DIR"

      - name: Workload restore (iOS)
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          dotnet workload restore

      - name: Restore (iOS only)
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          dotnet restore "$(basename "${{ steps.proj.outputs.csproj }}")" -p:TargetFramework=net8.0-ios

      - name: Create & unlock keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> "$GITHUB_ENV"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain

      - name: Import .p12 into keychain
        env:
          IOS_DISTRIBUTION_P12_BASE64: ${{ secrets.IOS_DISTRIBUTION_P12_BASE64 }}
          IOS_DISTRIBUTION_P12_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_P12_PASSWORD }}
        run: |
          set -euo pipefail
          P12="$RUNNER_TEMP/dist.p12"
          echo "$IOS_DISTRIBUTION_P12_BASE64" | base64 --decode > "$P12"
          security import "$P12" -k "$KEYCHAIN_PATH" -P "$IOS_DISTRIBUTION_P12_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security
          CERT_NAME="$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | head -n1 | sed -E 's/.*"(.+)"/\1/')"
          echo "CERT_NAME=$CERT_NAME" >> "$GITHUB_ENV"
          echo "Certificado: $CERT_NAME"

      - name: Install provisioning profile
        env:
          IOS_APPSTORE_PROFILE_B64: ${{ secrets.IOS_APPSTORE_PROFILE_B64 }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_RAW="$RUNNER_TEMP/app.mobileprovision"
          echo "$IOS_APPSTORE_PROFILE_B64" | base64 --decode > "$PROFILE_RAW"
          PP_UUID="$(security cms -D -i "$PROFILE_RAW" | /usr/libexec/PlistBuddy -c 'Print:UUID' /dev/stdin)"
          echo "PP_UUID=$PP_UUID" >> "$GITHUB_ENV"
          cp "$PROFILE_RAW" "$HOME/Library/MobileDevice/Provisioning Profiles/$PP_UUID.mobileprovision"

      - name: Publish (.xcarchive) + .ipa
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          dotnet publish "$(basename "${{ steps.proj.outputs.csproj }}")" \
            -c Release \
            -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true \
            -p:BuildIpa=true \
            -p:CodesignKey="${{ env.CERT_NAME }}" \
            -p:ProvisioningProfileUuid="${{ env.PP_UUID }}"

      - name: Find IPA
        id: findipa
        run: |
          set -euo pipefail
          IPA_PATH="$(find "${{ steps.proj.outputs.srcdir }}/bin/Release/net8.0-ios/ios-arm64" -type f -name "*.ipa" -print -quit)"
          echo "ipa=$IPA_PATH" >> "$GITHUB_OUTPUT"
          test -f "$IPA_PATH" && echo "IPA: $IPA_PATH"

      - name: Upload to TestFlight
        if: steps.findipa.outputs.ipa != ''
        env:
          APPSTORE_ISSUER_ID:   ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID:      ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          IPA="${{ steps.findipa.outputs.ipa }}"
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          KEYFILE="$HOME/.appstoreconnect/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8"
          printf "%s" "$APPSTORE_PRIVATE_KEY" > "$KEYFILE"
          chmod 600 "$KEYFILE"
          xcrun iTMSTransporter -m upload -apiKey "$APPSTORE_KEY_ID" -apiIssuer "$APPSTORE_ISSUER_ID" -assetFile "$IPA" -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ${{ steps.findipa.outputs.ipa }}
            $HOME/Library/Logs/DiagnosticReports/*
          if-no-files-found: ignore
