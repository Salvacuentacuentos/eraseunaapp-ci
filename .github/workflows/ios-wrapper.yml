name: iOS TestFlight (MAUI) - público + repositorio privado

on:
  workflow_dispatch:

concurrency:
  group: ios-testflight-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  DOTNET_VERSION: 8.0.415
  XCODE_VERSION: "16.1"

jobs:
  build-and-upload:
    runs-on: macos-14

    steps:
      - name: Checkout CI repo
        uses: actions/checkout@v4

      - name: Checkout código privado
        uses: actions/checkout@v4
        with:
          repository: Salvacuentacuentos/Eraseunaapp
          path: source/repos
          ssh-key: ${{ secrets.PRIVATE_REPO_DEPLOY_KEY }}

      - name: Seleccionar Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Apuntar .NET al Xcode seleccionado
        run: |
          XCODE_DEV="$(xcode-select -p)"
          XCODE_APP="$(dirname \"$(dirname \"$XCODE_DEV\")\")"
          echo "DEVELOPER_DIR=$XCODE_DEV" >> "$GITHUB_ENV"
          echo "MD_APPLE_SDK_ROOT=$XCODE_APP" >> "$GITHUB_ENV"

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Instalar MAUI workloads (iOS)
        run: |
          dotnet workload install maui maui-ios --source https://api.nuget.org/v3/index.json

      - name: Localizar proyecto
        id: proj
        run: |
          CS=$(find source/repos -type f -name "Eraseunaapp.csproj" | head -n1)
          DIR=$(dirname "$CS"); NAME=$(basename "$CS")
          echo "csproj=$CS" >> "$GITHUB_OUTPUT"
          echo "srcdir=$DIR" >> "$GITHUB_OUTPUT"
          echo "csproj_name=$NAME" >> "$GITHUB_OUTPUT"

      - name: Crear global.json
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: echo '{ "sdk": { "version": "8.0.415", "rollForward": "disable" } }' > global.json

      - name: Restaurar workloads y paquetes
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          dotnet workload restore
          dotnet restore "${{ steps.proj.outputs.csproj_name }}"

      - name: Verificar icono App Store
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          ICON="Resources/AppIcon/appicon.png"
          test -f "$ICON" || { echo "::error::Falta $ICON"; exit 1; }
          W=$(sips -g pixelWidth  "$ICON" | awk '/pixelWidth/ {print $2}')
          H=$(sips -g pixelHeight "$ICON" | awk '/pixelHeight/ {print $2}')
          [ "$W" = "1024" ] && [ "$H" = "1024" ] || { echo "::error::Icono debe ser 1024x1024"; exit 1; }

      - name: Crear y desbloquear keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$RUNNER_TEMP/build.keychain-db"
          security default-keychain -s "$RUNNER_TEMP/build.keychain-db"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$RUNNER_TEMP/build.keychain-db"

      - name: Importar certificado
        env:
          IOS_DISTRIBUTION_P12_BASE64: ${{ secrets.IOS_DISTRIBUTION_P12_BASE64 }}
          IOS_DISTRIBUTION_P12_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERT_PATH="$RUNNER_TEMP/dist.p12"
          echo "$IOS_DISTRIBUTION_P12_BASE64" | base64 -d > "$CERT_PATH"
          security import "$CERT_PATH" -k "$RUNNER_TEMP/build.keychain-db" -P "$IOS_DISTRIBUTION_P12_PASSWORD" -A
          CERT_NAME=$(security find-identity -v -p codesigning "$RUNNER_TEMP/build.keychain-db" | grep '"' | sed -E 's/.*"(.*)".*/\1/' | head -n1)
          echo "CERT_NAME=$CERT_NAME" >> "$GITHUB_ENV"

      - name: Instalar provisioning profile
        env:
          IOS_APPSTORE_PROFILE_B64: ${{ secrets.IOS_APPSTORE_PROFILE_B64 }}
        run: |
          PROFILE_RAW="$RUNNER_TEMP/profile.mobileprovision"
          echo "$IOS_APPSTORE_PROFILE_B64" | base64 -d > "$PROFILE_RAW"
          security cms -D -i "$PROFILE_RAW" > "$RUNNER_TEMP/profile.plist"
          PP_UUID=$(defaults read "$RUNNER_TEMP/profile.plist" UUID)
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PROFILE_RAW" "$HOME/Library/MobileDevice/Provisioning Profiles/$PP_UUID.mobileprovision"
          echo "PP_UUID=$PP_UUID" >> "$GITHUB_ENV"

      - name: Compilar y publicar
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          BUILD_NO=$(date -u +%Y%m%d%H%M%S)
          echo "BUILD_NUMBER=$BUILD_NO" >> "$GITHUB_ENV"
          dotnet publish "${{ steps.proj.outputs.csproj_name }}" \
            -c Release -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true \
            -p:BuildIpa=true \
            -p:ApplicationVersion=$BUILD_NO \
            -p:CFBundleVersion=$BUILD_NO \
            -p:CFBundleIconName=AppIcon \
            -p:CodesignKey="$CERT_NAME" \
            -p:ProvisioningProfileUuid="$PP_UUID"

      - name: Subir a TestFlight
        env:
          APPSTORE_ISSUER_ID:   ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID:      ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          IPA=$(find "${{ steps.proj.outputs.srcdir }}/bin" -name '*.ipa' | head -n1)
          echo "$APPSTORE_PRIVATE_KEY" > "$HOME/AuthKey_${APPSTORE_KEY_ID}.p8"
          xcrun altool --upload-app -f "$IPA" -t ios --apiKey "$APPSTORE_KEY_ID" --apiIssuer "$APPSTORE_ISSUER_ID"

      - name: Subir artefactos
        uses: actions/upload-artifact@v4
        with:
          name: ipa-y-logs
          path: |
            ${{ steps.proj.outputs.srcdir }}/bin/**/*.ipa
            $HOME/Library/Logs/DiagnosticReports/
          if-no-files-found: ignore
