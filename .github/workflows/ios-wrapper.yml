name: iOS TestFlight (MAUI) — público ➜ privado

on:
  workflow_dispatch:

concurrency:
  group: ios-testflight-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOTNET_VERSION: 8.0.415
  XCODE_VERSION: "15.4"

jobs:
  build-and-upload:
    runs-on: macos-14

    steps:
      # 1) Este repo (público, wrapper CI)
      - name: Checkout (CI repo)
        uses: actions/checkout@v4

      # 2) Repo privado con el código MAUI
      - name: Checkout private source
        uses: actions/checkout@v4
        with:
          repository: Salvacuentacuentos/Eraseunaapp
          # ref: master  # o la rama real si no es master
          path: source/repos
          ssh-key: ${{ secrets.PRIVATE_REPO_DEPLOY_KEY }}

      # 3) Seleccionar Xcode
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      # 4) .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # 5) Cache NuGet
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # 6) Workloads MAUI iOS
      - name: Install MAUI workloads (iOS)
        run: |
          dotnet --info
          dotnet workload install maui maui-ios --source https://api.nuget.org/v3/index.json

      # 7) Variables de rutas del proyecto (AJUSTADAS A TU ESTRUCTURA)
      - name: Define paths
        run: |
          echo "SRC_DIR=source/repos/Eraseunaapp/Eraseunaapp" >> $GITHUB_ENV
          echo "PROJECT=Eraseunaapp.csproj" >> $GITHUB_ENV

      # 8) Debug: ver qué hay realmente
      - name: Debug paths (listing)
        run: |
          echo "PWD:"; pwd
          echo "----- list a nivel raíz -----"
          ls -la
          echo "----- list source/repos -----"
          ls -la source || true
          ls -la source/repos || true
          echo "----- buscar csproj (hasta 4 niveles) -----"
          find source -maxdepth 4 -type f -name "*.csproj" -print

      # 9) Restore (entrando en la carpeta exacta)
      - name: Restore (iOS only)
        run: |
          set -euo pipefail
          cd "$SRC_DIR"
          echo "Estoy en:"; pwd; ls -la
          test -f "$PROJECT" || { echo "No encuentro $PROJECT aquí"; exit 1; }
          dotnet restore "$PROJECT" -p:TargetFramework=net8.0-ios

      # 10) Keychain temporal para firmar
      - name: Create & unlock keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # Priorizar nuestro keychain
          security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain

      # 11) Importar .p12 (desde secret BASE64)
      - name: Import .p12 into keychain
        env:
          IOS_DISTRIBUTION_P12_BASE64: ${{ secrets.IOS_DISTRIBUTION_P12_BASE64 }}
          IOS_DISTRIBUTION_P12_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_P12_PASSWORD }}
        run: |
          set -euo pipefail
          P12="$RUNNER_TEMP/dist.p12"
          echo "$IOS_DISTRIBUTION_P12_BASE64" | base64 --decode > "$P12"

          security import "$P12" -k "$KEYCHAIN_PATH" -P "$IOS_DISTRIBUTION_P12_PASSWORD" -A \
                   -T /usr/bin/codesign -T /usr/bin/security

          # Detectar el nombre del certificado de firma
          CERT_NAME="$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | head -n1 | sed -E 's/.*"(.+)"/\1/')"
          echo "CERT_NAME=$CERT_NAME"
          test -n "$CERT_NAME"
          echo "CERT_NAME=$CERT_NAME" >> $GITHUB_ENV

      # 12) Instalar el provisioning profile (desde secret BASE64)
      - name: Install provisioning profile
        env:
          IOS_APPSTORE_PROFILE_B64: ${{ secrets.IOS_APPSTORE_PROFILE_B64 }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_RAW="$RUNNER_TEMP/app.mobileprovision"
          echo "$IOS_APPSTORE_PROFILE_B64" | base64 --decode > "$PROFILE_RAW"

          # Extraer UUID y colocar con el nombre que espera Xcode
          PP_UUID="$(
            security cms -D -i "$PROFILE_RAW" | \
            /usr/libexec/PlistBuddy -c 'Print:UUID' /dev/stdin
          )"
          echo "PP_UUID=$PP_UUID"
          cp "$PROFILE_RAW" "$HOME/Library/MobileDevice/Provisioning Profiles/$PP_UUID.mobileprovision"
          echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV

      # 13) Compilar y generar .ipa (firmando)
      - name: Publish (.xcarchive) + .ipa
        run: |
          set -euo pipefail
          cd "$SRC_DIR"
          dotnet publish "$PROJECT" \
            -c Release \
            -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true \
            -p:BuildIpa=true \
            -p:CodesignKey="$CERT_NAME" \
            -p:ProvisioningProfileUuid="$PP_UUID"

      # 14) Localizar el IPA para subirlo
      - name: Find IPA
        id: findipa
        run: |
          set -euo pipefail
          IPA_PATH="$(find "$SRC_DIR"/bin/Release/net8.0-ios/ios-arm64 -type f -name "*.ipa" -print -quit)"
          echo "ipa=$IPA_PATH" >> $GITHUB_OUTPUT
          test -f "$IPA_PATH" && echo "IPA: $IPA_PATH"

      # 15) Subir a TestFlight (App Store Connect API Key)
      - name: Upload to TestFlight
        if: steps.findipa.outputs.ipa != ''
        env:
          APPSTORE_ISSUER_ID:  ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID:     ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          IPA="${{ steps.findipa.outputs.ipa }}"

          # Preparar clave .p8 en la ruta que usa Transporter
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          KEYFILE="$HOME/.appstoreconnect/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8"
          printf "%s" "$APPSTORE_PRIVATE_KEY" > "$KEYFILE"
          chmod 600 "$KEYFILE"

          # Subida con iTMSTransporter
          xcrun iTMSTransporter -m upload \
            -apiKey "$APPSTORE_KEY_ID" \
            -apiIssuer "$APPSTORE_ISSUER_ID" \
            -assetFile "$IPA" -v

      # 16) Artefactos (IPA + logs) por si hace falta
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ${{ steps.findipa.outputs.ipa }}
            $HOME/Library/Logs/DiagnosticReports/*
          if-no-files-found: ignore
