name: iOS TestFlight (MAUI) — público ➜ privado

on:
  workflow_dispatch:

concurrency:
  group: ios-testflight-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  DOTNET_VERSION: 8.0.415
  XCODE_VERSION: "16.1"

jobs:
  build-and-upload:
    runs-on: macos-14

    steps:
      - name: Checkout (CI repo)
        uses: actions/checkout@v4

      - name: Checkout private source
        uses: actions/checkout@v4
        with:
          repository: Salvacuentacuentos/Eraseunaapp
          path: source/repos
          ssh-key: ${{ secrets.PRIVATE_REPO_DEPLOY_KEY }}

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Point .NET to selected Xcode (DEVELOPER_DIR & MD_APPLE_SDK_ROOT)
        run: |
          set -euo pipefail
          XCODE_DEV="$(xcode-select -p)"
          XCODE_APP="$(dirname "$(dirname "$XCODE_DEV")")"
          echo "DEVELOPER_DIR=$XCODE_DEV"     >> "$GITHUB_ENV"
          echo "MD_APPLE_SDK_ROOT=$XCODE_APP" >> "$GITHUB_ENV"
          xcodebuild -version

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install MAUI workloads (iOS)
        run: |
          set -euo pipefail
          dotnet --info
          dotnet workload install maui maui-ios --source https://api.nuget.org/v3/index.json

      - name: Locate project (auto)
        id: proj
        run: |
          set -euo pipefail
          CS=$(find source/repos -type f -name "Eraseunaapp.csproj" -print \
               | awk '{ print length, $0 }' | sort -nr | head -n1 | cut -d" " -f2-)
          if [ -z "${CS:-}" ]; then
            CS=$(find source/repos -type f -name "*.csproj" -print \
                 | awk '{ print length, $0 }' | sort -nr | head -n1 | cut -d" " -f2-)
          fi
          DIR=$(dirname "$CS"); NAME=$(basename "$CS")
          echo "csproj=$CS"        >> "$GITHUB_OUTPUT"
          echo "srcdir=$DIR"       >> "$GITHUB_OUTPUT"
          echo "csproj_name=$NAME" >> "$GITHUB_OUTPUT"
          ls -la "$DIR"

      - name: Pin .NET 8 SDK (global.json)
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          cat > global.json <<'JSON'
          { "sdk": { "version": "8.0.415", "rollForward": "disable" } }
          JSON
          dotnet --version

      - name: Assert SDK 8.0.415
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          V=$(dotnet --version)
          [ "$V" = "8.0.415" ] || { echo "::error::Usando SDK $V en vez de 8.0.415"; exit 1; }

      - name: Workload restore (iOS)
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          dotnet workload restore --project "${{ steps.proj.outputs.csproj_name }}" \
            -p:TargetFramework=net8.0-ios \
            -p:TargetFrameworks=net8.0-ios

      - name: Restore (iOS only)
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          dotnet restore "${{ steps.proj.outputs.csproj_name }}" \
            -p:TargetFramework=net8.0-ios \
            -p:TargetFrameworks=net8.0-ios \
            -p:CheckEolTargetFramework=false \
            -p:SuppressTfmSupportBuildCheck=true \
            -p:TreatWarningsAsErrors=false \
            -p:NoWarn=NU1605

      # Diagnóstico previo: ¿MAUI generó el catálogo con AppIcon.appiconset?
      - name: Dump MAUI-generated xcassets (obj)
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          echo "🔎 Buscando AppIcon.appiconset y Contents.json en obj/…"
          find obj -type d -name "AppIcon.appiconset" -print || true
          find obj -type f -name "Contents.json" -path "*AppIcon.appiconset/*" -print || true

      # Asegura que el PNG base 1024 exista en el repo
      - name: Verify 1024x1024 App Store icon
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          ICON="Resources/AppIcon/appicon.png"
          test -f "$ICON" || { echo "::error::Falta $ICON"; exit 1; }
          W=$(sips -g pixelWidth  "$ICON" | awk '/pixelWidth/ {print $2}')
          H=$(sips -g pixelHeight "$ICON" | awk '/pixelHeight/ {print $2}')
          echo "appicon.png => ${W}x${H}"
          [ "$W" = "1024" ] && [ "$H" = "1024" ] || { echo "::error::Debe ser 1024x1024"; exit 1; }

      - name: Create & unlock keychain
        env: { KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} }
        run: |
          set -euo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain

      - name: Import .p12 into keychain and allow codesign (robust)
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          IOS_DISTRIBUTION_P12_BASE64: ${{ secrets.IOS_DISTRIBUTION_P12_BASE64 }}
          IOS_DISTRIBUTION_P12_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_P12_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          P12_PATH="$RUNNER_TEMP/dist.p12"
          printf %s "$IOS_DISTRIBUTION_P12_BASE64" | base64 --decode > "$P12_PATH"
          [ -s "$P12_PATH" ] || { echo "❌ .p12 vacío"; exit 1; }
          if ! openssl pkcs12 -in "$P12_PATH" -passin pass:"$IOS_DISTRIBUTION_P12_PASSWORD" -info -nokeys >/dev/null 2>&1; then
            echo "❌ Contraseña .p12 no válida"; exit 1; fi
          if security import "$P12_PATH" -k "$KEYCHAIN_PATH" -P "$IOS_DISTRIBUTION_P12_PASSWORD" -A -f pkcs12 \
               -T /usr/bin/codesign -T /usr/bin/security; then
            echo "✅ Import OK"
          else
            echo "ℹ️ Reempaquetando…"
            openssl pkcs12 -in "$P12_PATH" -passin pass:"$IOS_DISTRIBUTION_P12_PASSWORD" -nodes -out "$RUNNER_TEMP/tmp.pem"
            openssl pkcs12 -export -in "$RUNNER_TEMP/tmp.pem" -passout pass:"$IOS_DISTRIBUTION_P12_PASSWORD" -out "$RUNNER_TEMP/dist-legacy.p12"
            security import "$RUNNER_TEMP/dist-legacy.p12" -k "$KEYCHAIN_PATH" -P "$IOS_DISTRIBUTION_P12_PASSWORD" -A -f pkcs12 \
               -T /usr/bin/codesign -T /usr/bin/security
          fi
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          CERT_NAME="$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | sed -n 's/.*"\(.*\)".*/\1/p' | head -n1)"
          echo "CERT_NAME=$CERT_NAME" >> "$GITHUB_ENV"

      - name: Install provisioning profile (robust)
        env: { IOS_APPSTORE_PROFILE_B64: ${{ secrets.IOS_APPSTORE_PROFILE_B64 }} }
        run: |
          set -euo pipefail
          PROFILE_RAW="$RUNNER_TEMP/app.mobileprovision"
          printf %s "$IOS_APPSTORE_PROFILE_B64" | base64 --decode > "$PROFILE_RAW"
          [ -s "$PROFILE_RAW" ] || { echo "❌ .mobileprovision vacío"; exit 1; }
          security cms -D -i "$PROFILE_RAW" > "$RUNNER_TEMP/profile.plist"
          PP_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$RUNNER_TEMP/profile.plist")
          echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PROFILE_RAW" "$HOME/Library/MobileDevice/Provisioning Profiles/$PP_UUID.mobileprovision"

      - name: Compute build number (UTC timestamp)
        id: buildno
        run: |
          set -euo pipefail
          BN="$(date -u +%Y%m%d%H%M%S)"
          echo "BUILD_NUMBER=$BN" >> "$GITHUB_ENV"
          echo "BUILD_NUMBER=$BN"

      - name: Publish (.xcarchive) + .ipa
        working-directory: ${{ steps.proj.outputs.srcdir }}
        run: |
          set -euo pipefail
          dotnet publish "${{ steps.proj.outputs.csproj_name }}" \
            -c Release -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true -p:BuildIpa=true \
            -p:ApplicationVersion=${{ env.BUILD_NUMBER }} \
            -p:CFBundleVersion=${{ env.BUILD_NUMBER }} \
            -p:CFBundleIconName=AppIcon \
            -p:MtouchLink=SdkOnly \
            -p:PublishTrimmed=true \
            -p:CodesignKey="${{ env.CERT_NAME }}" \
            -p:ProvisioningProfileUuid="${{ env.PP_UUID }}" \
            -p:TreatWarningsAsErrors=false -p:NoWarn=NU1605

      - name: Find IPA
        id: findipa
        run: |
          set -euo pipefail
          IPA_PATH="$(find "${{ steps.proj.outputs.srcdir }}/bin/Release/net8.0-ios/ios-arm64/publish" -type f -name "*.ipa" -print -quit)"
          if [ -z "$IPA_PATH" ]; then
            IPA_PATH="$(find "${{ steps.proj.outputs.srcdir }}/bin/Release/net8.0-ios/ios-arm64" -type f -name "*.ipa" -print -quit)"
          fi
          [ -n "$IPA_PATH" ] || { echo "::error::No se encontró .ipa"; exit 1; }
          echo "ipa=$IPA_PATH" >> $GITHUB_OUTPUT
          echo "IPA: $IPA_PATH"

      # INSPECCIÓN: dentro del IPA, comprueba Assets.car o PNGs 1024
      - name: Inspect icons in IPA (AppIcon 1024)
        if: steps.findipa.outputs.ipa != ''
        run: |
          set -euo pipefail
          IPA="${{ steps.findipa.outputs.ipa }}"
          TMPDIR="$(mktemp -d)"
          unzip -q "$IPA" -d "$TMPDIR"
          APP_DIR="$(find "$TMPDIR/Payload" -type d -name "*.app" -print -quit)"
          [ -d "$APP_DIR" ] || { echo "::error::No se encontró .app dentro del IPA"; exit 1; }
          if [ -f "$APP_DIR/Assets.car" ]; then
            echo "📦 Assets.car encontrado. Buscando AppIcon 1024 (ios-marketing)…"
            if /usr/bin/assetutil -I "$APP_DIR/Assets.car" | grep -i '"AppIcon"' -A5 | grep -E '1024|marketing|size' ; then
              echo "✅ AppIcon 1024 OK (via Assets.car)"
            else
              echo "::error::No aparece AppIcon 1024 en Assets.car"; exit 1
            fi
          else
            echo "ℹ️ No hay Assets.car; buscando PNGs sueltos…"
            CANDIDATES=$(find "$APP_DIR" -type f \( -iname 'AppIcon*.png' -o -iname '*Marketing*.png' -o -iname '*1024*.png' \) || true)
            if [ -z "$CANDIDATES" ]; then
              echo "::error::No se encontraron PNGs candidatos de AppIcon en el bundle"; exit 1
            fi
            OK=0
            while IFS= read -r P; do
              W=$(sips -g pixelWidth  "$P" | awk '/pixelWidth/ {print $2}')
              H=$(sips -g pixelHeight "$P" | awk '/pixelHeight/ {print $2}')
              echo "• $(basename "$P") — ${W}x${H}"
              if [ "$W" = "1024" ] && [ "$H" = "1024" ]; then OK=1; fi
            done <<< "$CANDIDATES"
            [ "$OK" -eq 1 ] && echo "✅ Encontrado icono 1024×1024 entre los PNGs sueltos" || { echo "::error::No hay PNG 1024×1024"; exit 1; }
          fi

      - name: Inspect IPA bundle id, versions & icon name
        if: steps.findipa.outputs.ipa != ''
        run: |
          set -euo pipefail
          IPA="${{ steps.findipa.outputs.ipa }}"
          PLIST_XML="$(unzip -p "$IPA" Payload/*.app/Info.plist | plutil -convert xml1 -o - -)"
          BID="$(echo "$PLIST_XML" | /usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' /dev/stdin)"
          SVER="$(echo "$PLIST_XML" | /usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' /dev/stdin || true)"
          BNUM="$(echo "$PLIST_XML" | /usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' /dev/stdin)"
          ICON="$(echo "$PLIST_XML" | /usr/libexec/PlistBuddy -c 'Print :CFBundleIconName' /dev/stdin || true)"
          echo "BundleId: $BID"
          echo "DisplayVersion: ${SVER:-<missing>}"
          echo "BuildNumber: $BNUM"
          echo "IconName: ${ICON:-<missing>}"

      - name: Upload to TestFlight
        if: steps.findipa.outputs.ipa != ''
        env:
          APPSTORE_ISSUER_ID:   ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID:      ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          IPA="${{ steps.findipa.outputs.ipa }}"
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          KEYFILE="$HOME/.appstoreconnect/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8"
          CONTENT="${APPSTORE_PRIVATE_KEY}"
          if echo "$CONTENT" | grep -q "BEGIN PRIVATE KEY"; then printf '%b' "$CONTENT" > "$KEYFILE"
          else if printf '%s' "$CONTENT" | base64 -d > "$KEYFILE" 2>/dev/null; then :; else printf '%b' "$CONTENT" > "$KEYFILE"; fi; fi
          chmod 600 "$KEYFILE"
          xcrun altool --list-providers --apiKey "$APPSTORE_KEY_ID" --apiIssuer "$APPSTORE_ISSUER_ID" >/dev/null
          xcrun altool --upload-app -f "$IPA" -t ios --apiKey "$APPSTORE_KEY_ID" --apiIssuer "$APPSTORE_ISSUER_ID" --verbose

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ${{ steps.findipa.outputs.ipa }}
            $HOME/Library/Logs/DiagnosticReports/*
          if-no-files-found: ignore
